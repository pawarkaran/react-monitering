{"version":3,"sources":["views/issues.js"],"names":["getBadge","statusof","getAction","actions","fields","Issues","setAuth","useState","allIssues","setAllIssues","issues","setIssues","getProfile","a","fetch","method","headers","jwt_token","localStorage","token","res","json","parseData","console","error","message","useEffect","modal","setModal","toggle","services","assign_to","title","urgency","summary","inputs","setInputs","useForm","register","handleSubmit","errors","onSubmit","data","e","preventDefault","target","className","myHeaders","Headers","append","body","JSON","stringify","response","ToastsStore","success","parseRes","log","activateLasers","changeHandler","name","value","centered","show","onClose","closeButton","store","position","ToastsContainerPosition","TOP_RIGHT","noValidate","type","onChange","placeholder","required","minLength","maxLength","ref","selected","fluid","sm","onClick","window","location","href","to","refresh","items","hover","tableFilter","columnFilterSlot","clickableRows","itemsPerPageSelect","sorter","bordered","size","itemsPerPage","pagination","scopedSlots","item","issue_id","color","priorities","created_at","breach"],"mappings":"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","file":"static/js/8.28815303.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { AiOutlineReload } from \"react-icons/ai\";\n\n\n\nimport {\n  CBadge,\n  CButton,\n  CButtonToolbar,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CDataTable,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CRow\n} from '@coreui/react'\nimport { useForm } from 'react-hook-form';\nimport { ToastsContainer, ToastsContainerPosition, ToastsStore } from 'react-toasts';\nimport { Link } from 'react-router-dom';\n\n\n\n\n\n// const usersData = [\n//   { number: 1, title: 'website not working', service: 'Icinga2Integration', created: '2018/01/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Active', breach: '', actions: '' },\n//   { number: 2, title: 'website not working', service: 'Icinga2Integration', created: '2018/02/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Banned', breach: '', actions: '' },\n//   { number: 3, title: 'website not working', service: 'Icinga2Integration', created: '2018/02/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Inactive', breach: '', actions: '' },\n//   { number: 4, title: 'server down', service: 'Icinga2Integration', created: '2018/03/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Pending', breach: '', actions: '' },\n//   { number: 5, title: 'website not working', service: 'Icinga2Integration', created: '2018/01/21', 'assigned_to': 'Johny Bravo', priority: '', status: 'Active', breach: '', actions: '' },\n//   { number: 6, title: 'website not working', service: 'Icinga2Integration', created: '2018/01/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Active', breach: '', actions: '' },\n//   { number: 7, title: 'server down', service: 'Icinga2Integration', created: '2018/02/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Banned', breach: '', actions: '' },\n//   { number: 8, title: 'website not working', service: 'Icinga2Integration', created: '2018/02/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Inactive', breach: '', actions: '' },\n//   { number: 9, title: 'website not working', service: 'Icinga2Integration', created: '2018/03/01', 'assigned_to': 'Johny Bravo', priority: '', status: 'Pending', breach: '', actions: '' },\n//   { number: 10, title: 'server down', service: 'Icinga2Integration', created: '2018/01/21', 'assigned_to': 'Johny Bravo', priority: '', status: 'Active', breach: '', actions: '' },\n// ]\n\n\nconst getBadge = statusof => {\n  switch (statusof) {\n    case 'Active': return 'success'\n    case 'pending': return 'dark'\n    case 'Pending': return 'warning'\n    case 'cross': return 'danger'\n    case 'low': return 'danger'\n    default: return 'primary'\n  }\n}\n\nconst getAction = actions => {\n  switch (actions) {\n    // case 'Ack': return 'success'\n    // case '': return 'dark'\n    // case 'Pending': return 'warning'\n    // case 'Banned': return 'danger'\n    // default: return 'primary'\n  }\n}\n\n\n\nconst fields = ['number', 'title', 'service', 'assign_to', 'statusof', 'priority', 'created', 'breach', 'actions']\n\nconst Issues = ({ setAuth }) => {\n\n\n\n  const [allIssues, setAllIssues] = useState([]);\n  const [issues, setIssues] = useState([]);\n  // ------------------------------------\n  const getProfile = async () => {\n    try {\n      const res = await fetch(\"http://164.52.201.141:3005/issues/\", {\n        method: \"GET\",\n        headers: { jwt_token: localStorage.token }\n      });\n\n      const parseData = await res.json();\n\n      setAllIssues(parseData);\n\n      // setName(parseData[0].user_firstname);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n\n  useEffect(() => {\n    getProfile();\n  }, []);\n\n  useEffect(() => {\n    setIssues(allIssues);\n  }, [allIssues]);\n\n  const logout = async e => {\n    e.preventDefault();\n    try {\n      localStorage.removeItem(\"token\");\n      setAuth(false);\n      // toast.success(\"Logout successfully\");\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  // ---------------------- Modal -------------------------\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => {\n    setModal(!modal);\n  }\n\n  const [inputs, setInputs] = useState({\n    services: \"\",\n    assign_to: \"\",\n    title: \"\",\n    urgency: \"\",\n    summary: \"\",\n    statusof: \"\",\n  });\n\n  const { services, assign_to, title, urgency, summary, statusof } = inputs;\n\n  const { register, handleSubmit, errors } = useForm();\n\n  const onSubmit = async (data, e) => {\n    e.preventDefault();\n    // console.log(data)\n    e.target.className += \" was-validated\";\n    try {\n      const myHeaders = new Headers();\n\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      myHeaders.append(\"jwt_token\", localStorage.token);\n\n      const body = { services, assign_to, title, urgency, statusof };\n      // ToastsStore.success(\"Issue Created\")\n      const response = await fetch(\n        \"http://164.52.201.141:3005/issues\",\n        {\n          method: \"POST\",\n          headers: myHeaders,\n          \n          body: JSON.stringify(body)\n        }\n      );\n        // console.log(\"11\");\n        ToastsStore.success(\"Issue Created\")\n        setInputs({\n          services: \"\",\n          assign_to: \"\",\n          title: \"\",\n          urgency: \"\",\n          summary: \"\",\n          statusof: \"\",\n        });\n        setModal(false)\n      const parseRes = await response.json();\n      console.log(parseRes);\n      // setInputs(\"\");\n      console.log(\"done\");\n      // ToastsStore.success(\"Issue Created\")\n      // if (parseRes.jwtToken) {\n      //   localStorage.setItem(\"token\", parseRes.jwtToken);\n        // toast.success(\"Register Successfully\");\n        // setAuth(true);\n        // toast.success(\"Register Successfully\");\n      // } else {\n        // toast.error(parseRes);\n        // setAuth(false);\n        // toast.error(parseRes);\n      // }\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  function activateLasers() {\n    setInputs({  \n      statusof: \"Acknowledged\",\n    });\n    console.log(\"cliecke\");\n  }\n\n  const changeHandler = e =>\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n\n  // ---------------------------------------\n  // -----------------------------\n  return (\n    <div>\n    \n      {/* ------------------------------ Modal ---------------------- */}\n      <CModal\n        centered\n        show={modal}\n        onClose={toggle}\n      >\n        <CModalHeader closeButton>Create A New Issue</CModalHeader>\n        <ToastsContainer store={ToastsStore} position={ToastsContainerPosition.TOP_RIGHT} />\n\n        <CModalBody>\n          {/* <CRow className=\"justify-content-center p-4\"> */}\n          {/* <CCol md=\"12\" > */}\n          {/* <CCard className=\"mx-4\">\n      <CCardBody className=\"p-4\"> */}\n          <form\n            className='needs-validation'\n            onSubmit={handleSubmit(onSubmit)}\n            noValidate\n          >\n\n\n\n\n            <div className=\"form-group \">\n              <label className=\"label-form\" >\n                Service:\n          <span className=\"text-danger\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                onChange={changeHandler}\n                value={services}\n                className=\"form-control input  bg-transparent border-2 outline-none rounded-sm   \"\n                name=\"services\"\n                placeholder=\"Services\"\n                required\n                minLength=\"2\"\n                maxLength=\"30\"\n                ref={register({\n                  required: \"Please Provide Missing Field\",\n                })}\n              />\n              {errors.services && <p className=\"text-danger pt-1\">{errors.services.message}</p>}\n\n\n            </div>\n\n\n            <div className=\"form-group \">\n              <label className=\"label-form\" >\n                Assign To:\n          <span className=\"text-danger\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                onChange={changeHandler}\n                value={assign_to}\n                className=\"form-control input  bg-transparent border-2 outline-none rounded-sm   \"\n                name=\"assign_to\"\n                placeholder=\"Assign to\"\n                required\n                minLength=\"2\"\n                maxLength=\"30\"\n                ref={register({\n                  required: \"Please Provide Missing Field\",\n                })}\n              />\n              {errors.assign_to && <p className=\"text-danger pt-1\">{errors.assign_to.message}</p>}\n            </div>\n\n            <div className=\"form-group \">\n              <label className=\"label-form\" >\n                Title:\n          <span className=\"text-danger\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                onChange={changeHandler}\n                value={title}\n                className=\"form-control input  bg-transparent border-2 outline-none rounded-sm   \"\n                name=\"title\"\n                placeholder=\"Title\"\n                required\n                minLength=\"2\"\n                maxLength=\"45\"\n                ref={register({\n                  required: \"Please Provide Missing Field\",\n                })}\n              />\n              {errors.title && <p className=\"text-danger pt-1\">{errors.title.message}</p>}\n\n\n            </div>\n\n\n            <div className=\"form-group \">\n              <label className=\"label-form\" >\n                Urgency:\n          <span className=\"text-danger\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                onChange={changeHandler}\n                value={urgency}\n                className=\"form-control input  bg-transparent border-2 outline-none rounded-sm   \"\n                name=\"urgency\"\n                placeholder=\"Urgency\"\n                required\n                minLength=\"2\"\n                maxLength=\"30\"\n                ref={register({\n                  required: \"Please Provide Missing Field\",\n                })}\n              />\n              {errors.urgency && <p className=\"text-danger pt-1\">{errors.urgency.message}</p>}\n\n\n            </div>\n\n            <div className=\"form-group \">\n              <label className=\"label-form\" >\n                Summary:\n                            <span className=\"text-danger\">*</span>\n              </label>\n              <textarea\n                type=\"text\"\n                onChange={changeHandler}\n                value={summary}\n                className=\"form-control input  bg-transparent border-2 outline-none rounded-sm   \"\n                name=\"summary\"\n                placeholder=\"Summary\"\n                required\n                // minLength=\"5\"\n                maxLength=\"100\"\n                ref={register({\n                  required: \"Please Provide Missing Field\",\n                })}\n              />\n              {errors.summary && <p className=\"text-danger pt-1\">{errors.summary.message}</p>}\n            </div>\n\n\n\n            <div className=\"form-group \">\n              <label className=\"label-form\" >\n                Status Of:\n          {/* <span className=\"text-danger\">*</span> */}\n              </label>\n              <select\n                onChange={changeHandler}\n                value={statusof}\n                name=\"statusof\"\n                className=\"form-control input  bg-transparent border-2 outline-none rounded-sm\"\n              >\n                <option value=\"Triggered\" selected>Triggered</option>\n                <option value=\"Acknowledged\" >Acknowledged</option>\n                <option value=\"Resolved\">Resolved</option>\n              </select>\n            </div>\n\n            <CButton type=\"submit\" className=\"btn btn-info\">Submit Incident</CButton>\n          </form>\n\n\n\n          {/* </CCol> */}\n          {/* </CRow> */}\n        </CModalBody>\n        <CModalFooter>\n          {/* <CButton color=\"primary\">Do Something</CButton>{' '} */}\n          {/* <CButton\n            color=\"secondary\"\n            onClick={toggle}\n          >Cancel</CButton> */}\n        </CModalFooter>\n      </CModal>\n\n      {/* -------------------------------------------------------- */}\n\n      <CContainer fluid>\n        <CRow>\n          <CCol sm=\"3\" className=\"text-center\">\n            Open Incidents\n          <h5 className=\"font-weight-bold\">2</h5>\n          </CCol>\n          <CCol sm=\"3\" className=\"text-center\">\n            Open-unacknowledged\n          <h5 className=\"font-weight-bold\">2</h5>\n          </CCol>\n          <CCol sm=\"3\" className=\"text-center\">\n            Assigned to you\n          <h5 className=\"font-weight-bold\">2</h5>\n          </CCol>\n          <CCol sm=\"3\" className=\"text-center\">\n            Unacknowledged by you\n          <h5 className=\"font-weight-bold\">2</h5>\n          </CCol>\n        </CRow>\n      </CContainer>\n\n\n      <CContainer fluid className=\"p-4\">\n        <CRow >\n        <button type=\"button\" className=\"btn btn-outline-dark px-4\" onClick={() => { window.location.href = \"/#/issues\" }}><AiOutlineReload /><Link to=\"dashboard\" refresh=\"true\" className=\"text-muted\">Refresh</Link></button>\n          <CButtonToolbar className=\"px-5\">\n            <CButton type=\"radio\" className=\"btn btn-outline-dark px-3\">Triggered</CButton>\n            <CButton type=\"radio\" className=\"btn btn-outline-dark px-4\">Open</CButton>\n            <CButton type=\"radio\" className=\"btn btn-outline-dark px-3\">Acknowledged</CButton>\n            <CButton type=\"radio\" className=\"btn btn-outline-dark px-3\">Resolved</CButton>\n            <CButton type=\"radio\" className=\"btn btn-outline-dark \">All</CButton>\n          </CButtonToolbar>\n          <button type=\"button\" className=\"btn btn-outline-dark\">Assigned to me</button>\n        </CRow>\n      </CContainer>\n\n\n      <CContainer fluid className=\"pr-4 pb-2 pl-0 d-flex justify-content-end \"> <div>\n\n        {/* <div class=\"btn-group btn-group-toggle px-3 \" data-toggle=\"CButtons btn-dark\">\n\n          <input className=\"form-control mr-sm\" type=\"search\" placeholder=\"Search Issues\" aria-label=\"Search\" />\n        </div> */}\n        <CButton type=\"button\" className=\"btn btn-info px-4\" onClick={toggle} >New Issue</CButton>\n\n      </div>\n      </CContainer>\n\n{/* ------------------------------- Table For all Issues ------------------- */}\n\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              Issues\n            </CCardHeader>\n            <CCardBody>\n              <CDataTable\n                items={issues}\n                fields={fields}\n                hover\n                // striped\n                tableFilter\n                columnFilterSlot\n                clickableRows\n                itemsPerPageSelect\n                // itemsPerPageSelect\n                sorter\n                bordered\n                size=\"lg\"\n                itemsPerPage={5}\n                pagination\n                scopedSlots={{\n                  'number':\n                    (item) => (\n                      <td>\n                        <p >\n                          {item.issue_id}\n                        </ p>\n                      </td>\n                    ),\n                  'title':\n                    (item) => (\n                      <td>\n                        <p >\n                          {item.title}\n                        </ p>\n                      </td>\n                    ),\n                  'service':\n                    (item) => (\n                      <td>\n                        <p >\n                          {item.services}\n                        </ p>\n                      </td>\n                    ),\n                  'Assign to':\n                    (item) => (\n                      <td>\n                        <p >\n                          {item.assign_to}\n                        </ p>\n                      </td>\n                    ),\n                  'status':\n                    (item) => (\n                      <td>\n                        <CBadge color={getBadge(item.statusof)}>\n                          {item.statusof}\n                        </ CBadge>\n                      </td>\n                    ),\n                  'priority':\n                    (item) => (\n                      <td>\n                        <p >\n                          {item.priorities}\n                        </ p>\n                      </td>\n                    ),\n                  'created':\n                    (item) => (\n                      <td>\n                        <p >\n                          {item.created_at}\n                        </ p>\n                      </td>\n                    ),\n                  'breach':\n                    (item) => (\n                      <td>\n                        <p >\n                          {item.breach}\n                        </ p>\n                      </td>\n                    ),\n                  'actions':\n                    (item) => (\n                      <td className=\"px-1\">\n                        <CButton type=\"submit\" className=\"btn-outline-dark m-1\" size=\"sm\" color={getAction(item.actions)}  onClick={activateLasers}>Acknowledged\n                          {item.actions}\n         \n                        </CButton >\n                        <CButton className=\"btn-outline-dark m-1\" size=\"sm\" color={getAction(item.actions)}>Resolve\n                          {item.actions}\n\n                        </CButton >\n                      </td>\n                    ),\n\n                }}\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n\n    </div>\n\n\n  )\n}\n\nexport default Issues\n"],"sourceRoot":""}