{"version":3,"sources":["views/pages/login/Login.js"],"names":["Login","setAuth","history","useState","token","setToken","setError","email","password","inputs","setInputs","useForm","register","handleSubmit","errors","onSubmit","data","e","a","preventDefault","console","log","body","fetch","method","headers","JSON","stringify","response","json","parseRes","jwtToken","localStorage","setItem","push","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","message","changeHandler","target","name","value","className","class","newestOnTop","rtl","pauseOnFocusLoss","store","ToastsStore","ToastsContainerPosition","TOP_RIGHT","md","noValidate","type","onChange","placeholder","required","minLength","maxLength","ref","pattern","sitekey","onExpired","block","to","href"],"mappings":"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","file":"static/js/9.3bd9cf90.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './login.scss';\n\n\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CCollapse, CNavbar, CNavbarBrand, CNavbarNav, CToggler,\n\n  CRow, CLink, CImg, CForm, CInput, CNavLink, CCard\n} from '@coreui/react'\nimport { useForm } from 'react-hook-form';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nimport { ToastsContainer, ToastsContainerPosition, ToastsStore } from 'react-toasts';\nimport { Link } from 'react-router-dom';\nimport { FooterMain } from '../../Footer/FooterMain';\nimport { Navbar } from '../../Navbar/Navbar';\nimport { toast, ToastContainer } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst Login = ({ setAuth, history }) => {\n\n\n\n  // const [ firstname, setName] = useState(\"\");\n\n\n  // const getProfile = async () => {\n  //   try {\n  //     const res = await fetch(\"http://localhost:3000/dashboard\", {\n  //       method: \"GET\",\n  //       headers: { jwt_token: localStorage.token }\n  //     });\n\n  //     const parseData = await res.json();\n  //     setName(parseData.user_firstname);\n  //   } catch (err) {\n  //     console.error(err.message);\n  //   }\n  // };\n\n  // const logout = async e => {\n  //   e.preventDefault();\n  //   try {\n  //     localStorage.removeItem(\"token\");\n  //     // setAuth(false);\n  //     // toast.success(\"Logout successfully\");\n  //   } catch (err) {\n  //     console.error(err.message);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   getProfile();\n  // }, []);\n\n  //  ---------------- ReCAPTCHa -----------------\n  // const reCaptcha = useRef();\n  const [token, setToken] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  // --------------------------\n\n  const [isOpen, setIsOpen] = useState(false);\n\n\n\n  const [inputs, setInputs] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const { email, password } = inputs;\n\n\n  const { register, handleSubmit, errors } = useForm();\n\n  const onSubmit = async (data, e) => {\n    // --------------\n    if (!token) {\n      setError(\"Yoou must verify the captcha\");\n      return;\n    }\n    setError(\"\");\n    // --------------\n    e.preventDefault();\n    console.log(data)\n    try {\n      const body = { email, password };\n      const response = await fetch(\n        \"http://164.52.201.141:3005/authentication/login\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        }\n      );\n\n      const parseRes = await response.json();\n\n      if (parseRes.jwtToken) {\n        localStorage.setItem(\"token\", parseRes.jwtToken);\n\n        history.push('/dashboard')\n        // ToastsStore.success(\"Logged in Seccessfully\")\n        toast.success(\"Logged in Seccessfully\", {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        setAuth(true);\n\n        // ToastsStore.success(\"Logged in Seccessfully\")\n\n      } else {\n        setAuth(false);\n        // ToastsStore.error(parseRes)\n        toast.error(parseRes, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      }\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n\n\n  const changeHandler = e =>\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n\n\n\n\n\n  return (\n\n\n    <div className=\"login-page \">\n\n\n      {/* ------------ Navbar -------------- */}\n\n      {/* \n      <div class=\"\">\n        <CNavbar expandable=\"sm\" className=\"navbar-com p-2 \" sticky=\"true\" fixed=\"top\">\n          <CToggler inNavbar onClick={() => setIsOpen(!isOpen)} />\n          <CNavbarBrand className=\"navbar-brand \"  >\n            <a href=\"/\"\n              className=\"text-decoration-none\">\n              <CImg\n                src={process.env.PUBLIC_URL + \"/images/logs.png\"}\n\n                height=\"50px\"\n              />\n            </a>\n          </CNavbarBrand>\n          <CCollapse show={isOpen} navbar>\n            <CNavbarNav className=\"navbar-text text-center \">\n              <CLink href=\"/\" className=\"navbar-12 pr-3 pl-3 text-decoration-none\" ><span className=\"navbar-12\">Home</span></CLink>\n              <CLink className=\"navbar-12 pr-3 pl-3 text-decoration-none\"><span className=\"navbar-12\">Contact</span></CLink>\n\n\n\n            </CNavbarNav>\n            <CNavbarNav className=\" ml-auto text-center d-flex justify-content-center\">\n              <CLink href=\"/#/login\" className=\"nav-righty text-white ml-3 mr-3 text-decoration-none \"><span className=\"nav-righty\">Login </span></CLink>\n              <CLink href=\"/#/register\" className=\"nav-righty text-white ml-3 mr-3  text-decoration-none\"><span className=\"nav-righty\">Sign Up </span></CLink>\n\n\n            </CNavbarNav>\n          </CCollapse>\n        </CNavbar>\n\n      </div> */}\n\n      {/* ------------------- PRSAC =------------------- */}\n\n      <div class=\"sticky-top\">\n        <Navbar />\n      </div>\n\n      {/* ---------------------------------- */}\n      <div>\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n        {/* Same as */}\n        <ToastContainer />\n\n        {/* <button onClick={() => ToastsStore.success(\"Hey, you just clicked!\")}>Click me</button> */}\n        <ToastsContainer store={ToastsStore} position={ToastsContainerPosition.TOP_RIGHT} />\n\n\n        {/* ----------------------------------------- */}\n        <div className=\"card-bg c-app c-default-layout flex-row justify-content-center \">\n\n          {/* <h1 className=\"\">Name: {firstname}</h1> */}\n\n\n\n          {/* <div className=\" d-flex justify-content-center\"> */}\n\n          {/* <CContainer className=\"login-card\"> */}\n\n\n\n          {/* <div className=\"card shadow-lg  \"> */}\n          {/* <img className=\"card-img-top\" src=\"...\" alt=\"Card image cap\" /> */}\n          {/* <div className=\"card-body \" md=\"5\"> */}\n\n          <div className=\"card\" >\n\n            <h5 className=\"card-title mt-3\"><h1 className=\"tittle-login text-center \">Login</h1>\n              <p className=\"text-muted text-center\">Welcome Back</p></h5>\n            <div className=\"justify-content-center\">\n              <div md=\"\" className=\"m-4\" >\n                {/* <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\"> */}\n                <form\n                  className='needs-validation'\n                  onSubmit={handleSubmit(onSubmit)}\n                  noValidate\n                >\n\n\n\n\n                  <div className=\"form-group \">\n                    <label className=\"label-form\" >\n                      Email Id:\n                  <span className=\"text-danger\">*</span>\n                    </label>\n                    <input\n                      type=\"email\"\n                      onChange={changeHandler}\n                      value={email}\n                      className=\"form-control input  bg-transparent border-2 outline-none rounded-sm   \"\n                      name=\"email\"\n                      // label=\"Email Id\"\n                      placeholder=\"Email Id\"\n                      // autoComplete=\"email\"\n                      // aria-required\n                      required\n                      minLength=\"5\"\n                      maxLength=\"30\"\n                      ref={register({\n                        required: \"Please Provide a Valid Email Id\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          // message: \"invalid email address\"\n                        }\n                      })}\n                    />\n                    {errors.email && <p className=\"text-danger pt-1\">{errors.email.message}</p>}\n\n\n                  </div>\n\n\n\n\n                  <div className=\"form-group\">\n                    <label className=\"label-form\" >\n                      Password\n                 <span className=\"text-muted\"> (Atleast 8 characters):</span>\n                      <span className=\"text-danger\">*</span>\n                    </label>\n                    <input\n                      type=\"password\"\n                      onChange={changeHandler}\n                      value={password}\n                      className=\"form-control input  bg-transparent border-2 outline-none rounded-sm \"\n                      name=\"password\"\n                      // label=\"Password\"\n                      placeholder=\"Password\"\n                      // aria-required\n                      required\n                      minLength=\"3\"\n                      maxLength=\"30\"\n                      ref={register({ required: \"Password Required\", })}\n                    />\n                    {errors.password && <p className=\"text-danger pt-1\">{errors.password.message}</p>}\n                  </div>\n\n                  <div className=\"form-group d-flex justify-content-center\">\n                    <ReCAPTCHA\n\n\n                      // ref={reCaptcha}\n                      sitekey=\"6LfptdQZAAAAAIaZPNPZMnTK_RoFPt4BmxPTgUbJ\"\n                      onChange={token => setToken(token)}\n                      onExpired={e => setToken(\"\")}\n                    // ref={register({\n                    //   required: true,\n                    // })}\n                    // onChange={token => setToken(token)}\n                    // onExpired={e => setToken(\"\")}\n                    />\n                  </div>\n\n\n\n\n                  <CButton type=\"submit\" className=\"label-button\" block>Login</CButton>\n                </form>\n\n                <div className=\"forgot-password text-right\">\n                  <Link to=\"/password/forgotpassword\" className=\"forgot-password text-muted\">Forget Password</Link>\n                </div>\n                <h6 className=\"font-small text-center text-muted text-lg p-1 pt-4\">\n                  By signing up, you agree to Devops's\n               <br />\n                  <a href=\"/#\" className=\"font-small  grey-text d-flex justify-content-center text-muted\">\n                    <span className=\"font-weight-bold\">Terms of Service and Privacy Policy.</span></a>\n                </h6>\n\n              </div>\n            </div>\n\n          </div>\n\n\n          {/* </div> */}\n          {/* </div> */}\n\n\n          {/* </CContainer> */}\n\n          {/* <h4>\n      Hey, My name is <div id=\"fragment1\">Hariharan</div>\n    <div id=\"fragment2\"> Hari Harker</div>\n    </h4> */}\n          {/* </div> */}\n        </div>\n\n\n        {/* ----------------- Footer ------------ */}\n        <FooterMain />\n        {/* ----------------------------- */}\n\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n"],"sourceRoot":""}